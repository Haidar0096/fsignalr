// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.perfektion.fsignalr;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  public enum TransportTypeMessage {
    ALL(0),
    WEB_SOCKETS(1),
    LONG_POLLING(2);

    final int index;

    private TransportTypeMessage(final int index) {
      this.index = index;
    }
  }

  public enum HubConnectionStateMessage {
    CONNECTED(0),
    CONNECTING(1),
    DISCONNECTED(2);

    final int index;

    private HubConnectionStateMessage(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HandledHubMethodMessage {
    private @NonNull String methodName;

    public @NonNull String getMethodName() {
      return methodName;
    }

    public void setMethodName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"methodName\" is null.");
      }
      this.methodName = setterArg;
    }

    private @NonNull Long argCount;

    public @NonNull Long getArgCount() {
      return argCount;
    }

    public void setArgCount(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"argCount\" is null.");
      }
      this.argCount = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    HandledHubMethodMessage() {}

    public static final class Builder {

      private @Nullable String methodName;

      @CanIgnoreReturnValue
      public @NonNull Builder setMethodName(@NonNull String setterArg) {
        this.methodName = setterArg;
        return this;
      }

      private @Nullable Long argCount;

      @CanIgnoreReturnValue
      public @NonNull Builder setArgCount(@NonNull Long setterArg) {
        this.argCount = setterArg;
        return this;
      }

      public @NonNull HandledHubMethodMessage build() {
        HandledHubMethodMessage pigeonReturn = new HandledHubMethodMessage();
        pigeonReturn.setMethodName(methodName);
        pigeonReturn.setArgCount(argCount);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(methodName);
      toListResult.add(argCount);
      return toListResult;
    }

    static @NonNull HandledHubMethodMessage fromList(@NonNull ArrayList<Object> list) {
      HandledHubMethodMessage pigeonResult = new HandledHubMethodMessage();
      Object methodName = list.get(0);
      pigeonResult.setMethodName((String) methodName);
      Object argCount = list.get(1);
      pigeonResult.setArgCount((argCount == null) ? null : ((argCount instanceof Integer) ? (Integer) argCount : (Long) argCount));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CreateHubConnectionManagerMessage {
    private @NonNull String baseUrl;

    public @NonNull String getBaseUrl() {
      return baseUrl;
    }

    public void setBaseUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"baseUrl\" is null.");
      }
      this.baseUrl = setterArg;
    }

    private @NonNull TransportTypeMessage transportType;

    public @NonNull TransportTypeMessage getTransportType() {
      return transportType;
    }

    public void setTransportType(@NonNull TransportTypeMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"transportType\" is null.");
      }
      this.transportType = setterArg;
    }

    private @Nullable Map<String, String> headers;

    public @Nullable Map<String, String> getHeaders() {
      return headers;
    }

    public void setHeaders(@Nullable Map<String, String> setterArg) {
      this.headers = setterArg;
    }

    private @Nullable String accessToken;

    public @Nullable String getAccessToken() {
      return accessToken;
    }

    public void setAccessToken(@Nullable String setterArg) {
      this.accessToken = setterArg;
    }

    private @NonNull Long handShakeResponseTimeoutInMilliseconds;

    public @NonNull Long getHandShakeResponseTimeoutInMilliseconds() {
      return handShakeResponseTimeoutInMilliseconds;
    }

    public void setHandShakeResponseTimeoutInMilliseconds(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"handShakeResponseTimeoutInMilliseconds\" is null.");
      }
      this.handShakeResponseTimeoutInMilliseconds = setterArg;
    }

    private @NonNull Long keepAliveIntervalInMilliseconds;

    public @NonNull Long getKeepAliveIntervalInMilliseconds() {
      return keepAliveIntervalInMilliseconds;
    }

    public void setKeepAliveIntervalInMilliseconds(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"keepAliveIntervalInMilliseconds\" is null.");
      }
      this.keepAliveIntervalInMilliseconds = setterArg;
    }

    private @NonNull Long serverTimeoutInMilliseconds;

    public @NonNull Long getServerTimeoutInMilliseconds() {
      return serverTimeoutInMilliseconds;
    }

    public void setServerTimeoutInMilliseconds(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"serverTimeoutInMilliseconds\" is null.");
      }
      this.serverTimeoutInMilliseconds = setterArg;
    }

    private @Nullable List<HandledHubMethodMessage> handledHubMethods;

    public @Nullable List<HandledHubMethodMessage> getHandledHubMethods() {
      return handledHubMethods;
    }

    public void setHandledHubMethods(@Nullable List<HandledHubMethodMessage> setterArg) {
      this.handledHubMethods = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    CreateHubConnectionManagerMessage() {}

    public static final class Builder {

      private @Nullable String baseUrl;

      @CanIgnoreReturnValue
      public @NonNull Builder setBaseUrl(@NonNull String setterArg) {
        this.baseUrl = setterArg;
        return this;
      }

      private @Nullable TransportTypeMessage transportType;

      @CanIgnoreReturnValue
      public @NonNull Builder setTransportType(@NonNull TransportTypeMessage setterArg) {
        this.transportType = setterArg;
        return this;
      }

      private @Nullable Map<String, String> headers;

      @CanIgnoreReturnValue
      public @NonNull Builder setHeaders(@Nullable Map<String, String> setterArg) {
        this.headers = setterArg;
        return this;
      }

      private @Nullable String accessToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setAccessToken(@Nullable String setterArg) {
        this.accessToken = setterArg;
        return this;
      }

      private @Nullable Long handShakeResponseTimeoutInMilliseconds;

      @CanIgnoreReturnValue
      public @NonNull Builder setHandShakeResponseTimeoutInMilliseconds(@NonNull Long setterArg) {
        this.handShakeResponseTimeoutInMilliseconds = setterArg;
        return this;
      }

      private @Nullable Long keepAliveIntervalInMilliseconds;

      @CanIgnoreReturnValue
      public @NonNull Builder setKeepAliveIntervalInMilliseconds(@NonNull Long setterArg) {
        this.keepAliveIntervalInMilliseconds = setterArg;
        return this;
      }

      private @Nullable Long serverTimeoutInMilliseconds;

      @CanIgnoreReturnValue
      public @NonNull Builder setServerTimeoutInMilliseconds(@NonNull Long setterArg) {
        this.serverTimeoutInMilliseconds = setterArg;
        return this;
      }

      private @Nullable List<HandledHubMethodMessage> handledHubMethods;

      @CanIgnoreReturnValue
      public @NonNull Builder setHandledHubMethods(@Nullable List<HandledHubMethodMessage> setterArg) {
        this.handledHubMethods = setterArg;
        return this;
      }

      public @NonNull CreateHubConnectionManagerMessage build() {
        CreateHubConnectionManagerMessage pigeonReturn = new CreateHubConnectionManagerMessage();
        pigeonReturn.setBaseUrl(baseUrl);
        pigeonReturn.setTransportType(transportType);
        pigeonReturn.setHeaders(headers);
        pigeonReturn.setAccessToken(accessToken);
        pigeonReturn.setHandShakeResponseTimeoutInMilliseconds(handShakeResponseTimeoutInMilliseconds);
        pigeonReturn.setKeepAliveIntervalInMilliseconds(keepAliveIntervalInMilliseconds);
        pigeonReturn.setServerTimeoutInMilliseconds(serverTimeoutInMilliseconds);
        pigeonReturn.setHandledHubMethods(handledHubMethods);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(baseUrl);
      toListResult.add(transportType == null ? null : transportType.index);
      toListResult.add(headers);
      toListResult.add(accessToken);
      toListResult.add(handShakeResponseTimeoutInMilliseconds);
      toListResult.add(keepAliveIntervalInMilliseconds);
      toListResult.add(serverTimeoutInMilliseconds);
      toListResult.add(handledHubMethods);
      return toListResult;
    }

    static @NonNull CreateHubConnectionManagerMessage fromList(@NonNull ArrayList<Object> list) {
      CreateHubConnectionManagerMessage pigeonResult = new CreateHubConnectionManagerMessage();
      Object baseUrl = list.get(0);
      pigeonResult.setBaseUrl((String) baseUrl);
      Object transportType = list.get(1);
      pigeonResult.setTransportType(TransportTypeMessage.values()[(int) transportType]);
      Object headers = list.get(2);
      pigeonResult.setHeaders((Map<String, String>) headers);
      Object accessToken = list.get(3);
      pigeonResult.setAccessToken((String) accessToken);
      Object handShakeResponseTimeoutInMilliseconds = list.get(4);
      pigeonResult.setHandShakeResponseTimeoutInMilliseconds((handShakeResponseTimeoutInMilliseconds == null) ? null : ((handShakeResponseTimeoutInMilliseconds instanceof Integer) ? (Integer) handShakeResponseTimeoutInMilliseconds : (Long) handShakeResponseTimeoutInMilliseconds));
      Object keepAliveIntervalInMilliseconds = list.get(5);
      pigeonResult.setKeepAliveIntervalInMilliseconds((keepAliveIntervalInMilliseconds == null) ? null : ((keepAliveIntervalInMilliseconds instanceof Integer) ? (Integer) keepAliveIntervalInMilliseconds : (Long) keepAliveIntervalInMilliseconds));
      Object serverTimeoutInMilliseconds = list.get(6);
      pigeonResult.setServerTimeoutInMilliseconds((serverTimeoutInMilliseconds == null) ? null : ((serverTimeoutInMilliseconds instanceof Integer) ? (Integer) serverTimeoutInMilliseconds : (Long) serverTimeoutInMilliseconds));
      Object handledHubMethods = list.get(7);
      pigeonResult.setHandledHubMethods((List<HandledHubMethodMessage>) handledHubMethods);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HubConnectionManagerIdMessage {
    private @NonNull Long hubConnectionManagerId;

    public @NonNull Long getHubConnectionManagerId() {
      return hubConnectionManagerId;
    }

    public void setHubConnectionManagerId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"hubConnectionManagerId\" is null.");
      }
      this.hubConnectionManagerId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    HubConnectionManagerIdMessage() {}

    public static final class Builder {

      private @Nullable Long hubConnectionManagerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setHubConnectionManagerId(@NonNull Long setterArg) {
        this.hubConnectionManagerId = setterArg;
        return this;
      }

      public @NonNull HubConnectionManagerIdMessage build() {
        HubConnectionManagerIdMessage pigeonReturn = new HubConnectionManagerIdMessage();
        pigeonReturn.setHubConnectionManagerId(hubConnectionManagerId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(hubConnectionManagerId);
      return toListResult;
    }

    static @NonNull HubConnectionManagerIdMessage fromList(@NonNull ArrayList<Object> list) {
      HubConnectionManagerIdMessage pigeonResult = new HubConnectionManagerIdMessage();
      Object hubConnectionManagerId = list.get(0);
      pigeonResult.setHubConnectionManagerId((hubConnectionManagerId == null) ? null : ((hubConnectionManagerId instanceof Integer) ? (Integer) hubConnectionManagerId : (Long) hubConnectionManagerId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class InvokeHubMethodMessage {
    private @NonNull String methodName;

    public @NonNull String getMethodName() {
      return methodName;
    }

    public void setMethodName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"methodName\" is null.");
      }
      this.methodName = setterArg;
    }

    private @Nullable List<String> args;

    public @Nullable List<String> getArgs() {
      return args;
    }

    public void setArgs(@Nullable List<String> setterArg) {
      this.args = setterArg;
    }

    private @NonNull HubConnectionManagerIdMessage hubConnectionManagerIdMessage;

    public @NonNull HubConnectionManagerIdMessage getHubConnectionManagerIdMessage() {
      return hubConnectionManagerIdMessage;
    }

    public void setHubConnectionManagerIdMessage(@NonNull HubConnectionManagerIdMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"hubConnectionManagerIdMessage\" is null.");
      }
      this.hubConnectionManagerIdMessage = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    InvokeHubMethodMessage() {}

    public static final class Builder {

      private @Nullable String methodName;

      @CanIgnoreReturnValue
      public @NonNull Builder setMethodName(@NonNull String setterArg) {
        this.methodName = setterArg;
        return this;
      }

      private @Nullable List<String> args;

      @CanIgnoreReturnValue
      public @NonNull Builder setArgs(@Nullable List<String> setterArg) {
        this.args = setterArg;
        return this;
      }

      private @Nullable HubConnectionManagerIdMessage hubConnectionManagerIdMessage;

      @CanIgnoreReturnValue
      public @NonNull Builder setHubConnectionManagerIdMessage(@NonNull HubConnectionManagerIdMessage setterArg) {
        this.hubConnectionManagerIdMessage = setterArg;
        return this;
      }

      public @NonNull InvokeHubMethodMessage build() {
        InvokeHubMethodMessage pigeonReturn = new InvokeHubMethodMessage();
        pigeonReturn.setMethodName(methodName);
        pigeonReturn.setArgs(args);
        pigeonReturn.setHubConnectionManagerIdMessage(hubConnectionManagerIdMessage);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(methodName);
      toListResult.add(args);
      toListResult.add((hubConnectionManagerIdMessage == null) ? null : hubConnectionManagerIdMessage.toList());
      return toListResult;
    }

    static @NonNull InvokeHubMethodMessage fromList(@NonNull ArrayList<Object> list) {
      InvokeHubMethodMessage pigeonResult = new InvokeHubMethodMessage();
      Object methodName = list.get(0);
      pigeonResult.setMethodName((String) methodName);
      Object args = list.get(1);
      pigeonResult.setArgs((List<String>) args);
      Object hubConnectionManagerIdMessage = list.get(2);
      pigeonResult.setHubConnectionManagerIdMessage((hubConnectionManagerIdMessage == null) ? null : HubConnectionManagerIdMessage.fromList((ArrayList<Object>) hubConnectionManagerIdMessage));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class OnHubConnectionStateChangedMessage {
    private @NonNull HubConnectionStateMessage state;

    public @NonNull HubConnectionStateMessage getState() {
      return state;
    }

    public void setState(@NonNull HubConnectionStateMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    OnHubConnectionStateChangedMessage() {}

    public static final class Builder {

      private @Nullable HubConnectionStateMessage state;

      @CanIgnoreReturnValue
      public @NonNull Builder setState(@NonNull HubConnectionStateMessage setterArg) {
        this.state = setterArg;
        return this;
      }

      public @NonNull OnHubConnectionStateChangedMessage build() {
        OnHubConnectionStateChangedMessage pigeonReturn = new OnHubConnectionStateChangedMessage();
        pigeonReturn.setState(state);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(state == null ? null : state.index);
      return toListResult;
    }

    static @NonNull OnHubConnectionStateChangedMessage fromList(@NonNull ArrayList<Object> list) {
      OnHubConnectionStateChangedMessage pigeonResult = new OnHubConnectionStateChangedMessage();
      Object state = list.get(0);
      pigeonResult.setState(HubConnectionStateMessage.values()[(int) state]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class OnHubConnectionClosedMessage {
    private @NonNull String exceptionMessage;

    public @NonNull String getExceptionMessage() {
      return exceptionMessage;
    }

    public void setExceptionMessage(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"exceptionMessage\" is null.");
      }
      this.exceptionMessage = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    OnHubConnectionClosedMessage() {}

    public static final class Builder {

      private @Nullable String exceptionMessage;

      @CanIgnoreReturnValue
      public @NonNull Builder setExceptionMessage(@NonNull String setterArg) {
        this.exceptionMessage = setterArg;
        return this;
      }

      public @NonNull OnHubConnectionClosedMessage build() {
        OnHubConnectionClosedMessage pigeonReturn = new OnHubConnectionClosedMessage();
        pigeonReturn.setExceptionMessage(exceptionMessage);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(exceptionMessage);
      return toListResult;
    }

    static @NonNull OnHubConnectionClosedMessage fromList(@NonNull ArrayList<Object> list) {
      OnHubConnectionClosedMessage pigeonResult = new OnHubConnectionClosedMessage();
      Object exceptionMessage = list.get(0);
      pigeonResult.setExceptionMessage((String) exceptionMessage);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class OnMessageReceivedMessage {
    private @NonNull String methodName;

    public @NonNull String getMethodName() {
      return methodName;
    }

    public void setMethodName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"methodName\" is null.");
      }
      this.methodName = setterArg;
    }

    private @Nullable List<String> args;

    public @Nullable List<String> getArgs() {
      return args;
    }

    public void setArgs(@Nullable List<String> setterArg) {
      this.args = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    OnMessageReceivedMessage() {}

    public static final class Builder {

      private @Nullable String methodName;

      @CanIgnoreReturnValue
      public @NonNull Builder setMethodName(@NonNull String setterArg) {
        this.methodName = setterArg;
        return this;
      }

      private @Nullable List<String> args;

      @CanIgnoreReturnValue
      public @NonNull Builder setArgs(@Nullable List<String> setterArg) {
        this.args = setterArg;
        return this;
      }

      public @NonNull OnMessageReceivedMessage build() {
        OnMessageReceivedMessage pigeonReturn = new OnMessageReceivedMessage();
        pigeonReturn.setMethodName(methodName);
        pigeonReturn.setArgs(args);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(methodName);
      toListResult.add(args);
      return toListResult;
    }

    static @NonNull OnMessageReceivedMessage fromList(@NonNull ArrayList<Object> list) {
      OnMessageReceivedMessage pigeonResult = new OnMessageReceivedMessage();
      Object methodName = list.get(0);
      pigeonResult.setMethodName((String) methodName);
      Object args = list.get(1);
      pigeonResult.setArgs((List<String>) args);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class HubConnectionManagerNativeApiCodec extends StandardMessageCodec {
    public static final HubConnectionManagerNativeApiCodec INSTANCE = new HubConnectionManagerNativeApiCodec();

    private HubConnectionManagerNativeApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return CreateHubConnectionManagerMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return HandledHubMethodMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return HubConnectionManagerIdMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return InvokeHubMethodMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof CreateHubConnectionManagerMessage) {
        stream.write(128);
        writeValue(stream, ((CreateHubConnectionManagerMessage) value).toList());
      } else if (value instanceof HandledHubMethodMessage) {
        stream.write(129);
        writeValue(stream, ((HandledHubMethodMessage) value).toList());
      } else if (value instanceof HubConnectionManagerIdMessage) {
        stream.write(130);
        writeValue(stream, ((HubConnectionManagerIdMessage) value).toList());
      } else if (value instanceof InvokeHubMethodMessage) {
        stream.write(131);
        writeValue(stream, ((InvokeHubMethodMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * Used to communicate with hub connections managers on the native side.
   *
   * Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface HubConnectionManagerNativeApi {

    void createHubConnectionManager(@NonNull CreateHubConnectionManagerMessage msg, @NonNull Result<HubConnectionManagerIdMessage> result);

    void startHubConnection(@NonNull HubConnectionManagerIdMessage msg, @NonNull VoidResult result);

    void stopHubConnection(@NonNull HubConnectionManagerIdMessage msg, @NonNull VoidResult result);

    void invoke(@NonNull InvokeHubMethodMessage msg, @NonNull VoidResult result);

    void disposeHubConnectionManager(@NonNull HubConnectionManagerIdMessage msg, @NonNull VoidResult result);

    /** The codec used by HubConnectionManagerNativeApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return HubConnectionManagerNativeApiCodec.INSTANCE;
    }
    /**Sets up an instance of `HubConnectionManagerNativeApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable HubConnectionManagerNativeApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable HubConnectionManagerNativeApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.fsignalr.HubConnectionManagerNativeApi.createHubConnectionManager" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                CreateHubConnectionManagerMessage msgArg = (CreateHubConnectionManagerMessage) args.get(0);
                Result<HubConnectionManagerIdMessage> resultCallback =
                    new Result<HubConnectionManagerIdMessage>() {
                      public void success(HubConnectionManagerIdMessage result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.createHubConnectionManager(msgArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.fsignalr.HubConnectionManagerNativeApi.startHubConnection" + messageChannelSuffix, getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                HubConnectionManagerIdMessage msgArg = (HubConnectionManagerIdMessage) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startHubConnection(msgArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.fsignalr.HubConnectionManagerNativeApi.stopHubConnection" + messageChannelSuffix, getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                HubConnectionManagerIdMessage msgArg = (HubConnectionManagerIdMessage) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.stopHubConnection(msgArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.fsignalr.HubConnectionManagerNativeApi.invoke" + messageChannelSuffix, getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                InvokeHubMethodMessage msgArg = (InvokeHubMethodMessage) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.invoke(msgArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.fsignalr.HubConnectionManagerNativeApi.disposeHubConnectionManager" + messageChannelSuffix, getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                HubConnectionManagerIdMessage msgArg = (HubConnectionManagerIdMessage) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.disposeHubConnectionManager(msgArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class HubConnectionManagerFlutterApiCodec extends StandardMessageCodec {
    public static final HubConnectionManagerFlutterApiCodec INSTANCE = new HubConnectionManagerFlutterApiCodec();

    private HubConnectionManagerFlutterApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return OnHubConnectionClosedMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return OnHubConnectionStateChangedMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return OnMessageReceivedMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof OnHubConnectionClosedMessage) {
        stream.write(128);
        writeValue(stream, ((OnHubConnectionClosedMessage) value).toList());
      } else if (value instanceof OnHubConnectionStateChangedMessage) {
        stream.write(129);
        writeValue(stream, ((OnHubConnectionStateChangedMessage) value).toList());
      } else if (value instanceof OnMessageReceivedMessage) {
        stream.write(130);
        writeValue(stream, ((OnMessageReceivedMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class HubConnectionManagerFlutterApi {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public HubConnectionManagerFlutterApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }
    public HubConnectionManagerFlutterApi(@NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by HubConnectionManagerFlutterApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return HubConnectionManagerFlutterApiCodec.INSTANCE;
    }
    public void onHubConnectionStateChanged(@NonNull OnHubConnectionStateChangedMessage msgArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.fsignalr.HubConnectionManagerFlutterApi.onHubConnectionStateChanged" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(msgArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onConnectionClosed(@NonNull OnHubConnectionClosedMessage msgArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.fsignalr.HubConnectionManagerFlutterApi.onConnectionClosed" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(msgArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onMessageReceived(@NonNull OnMessageReceivedMessage msgArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.fsignalr.HubConnectionManagerFlutterApi.onMessageReceived" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(msgArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
