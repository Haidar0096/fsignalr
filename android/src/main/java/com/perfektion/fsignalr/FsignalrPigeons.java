// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.perfektion.fsignalr;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class FsignalrPigeons {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Used to specify the transport the client will use. */
  public enum TransportType {
    /** The client will use any available transport. */
    ALL(0),
    /** The client will use WebSockets to communicate with the server. */
    WEB_SOCKETS(1),
    /** The client will use Long Polling to communicate with the server. */
    LONG_POLLING(2);

    final int index;

    private TransportType(final int index) {
      this.index = index;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FsignalrApi {

    void createHubConnection(@NonNull String baseUrl, @NonNull TransportType transportType, @Nullable Map<String, String> headers, @Nullable String accessTokenProviderResult, @NonNull Long handleShakeResponseTimeoutInMilliseconds, @NonNull Long keepAliveIntervalInMilliseconds, @NonNull Long serverTimeoutInMilliseconds, @NonNull VoidResult result);

    /** The codec used by FsignalrApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `FsignalrApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable FsignalrApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable FsignalrApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.fsignalr.FsignalrApi.createHubConnection" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String baseUrlArg = (String) args.get(0);
                TransportType transportTypeArg = TransportType.values()[(int) args.get(1)];
                Map<String, String> headersArg = (Map<String, String>) args.get(2);
                String accessTokenProviderResultArg = (String) args.get(3);
                Number handleShakeResponseTimeoutInMillisecondsArg = (Number) args.get(4);
                Number keepAliveIntervalInMillisecondsArg = (Number) args.get(5);
                Number serverTimeoutInMillisecondsArg = (Number) args.get(6);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.createHubConnection(baseUrlArg, transportTypeArg, headersArg, accessTokenProviderResultArg, (handleShakeResponseTimeoutInMillisecondsArg == null) ? null : handleShakeResponseTimeoutInMillisecondsArg.longValue(), (keepAliveIntervalInMillisecondsArg == null) ? null : keepAliveIntervalInMillisecondsArg.longValue(), (serverTimeoutInMillisecondsArg == null) ? null : serverTimeoutInMillisecondsArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
