// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum TransportTypeMessage {
  all,
  webSockets,
  longPolling,
}

enum HubConnectionStateMessage {
  connected,
  connecting,
  disconnected,
}

class HandledHubMethodMessage {
  HandledHubMethodMessage({
    required this.methodName,
    required this.argCount,
  });

  String methodName;

  int argCount;

  Object encode() {
    return <Object?>[
      methodName,
      argCount,
    ];
  }

  static HandledHubMethodMessage decode(Object result) {
    result as List<Object?>;
    return HandledHubMethodMessage(
      methodName: result[0]! as String,
      argCount: result[1]! as int,
    );
  }
}

class CreateHubConnectionManagerMessage {
  CreateHubConnectionManagerMessage({
    required this.baseUrl,
    required this.transportType,
    this.headers,
    this.accessToken,
    required this.handShakeResponseTimeoutInMilliseconds,
    required this.keepAliveIntervalInMilliseconds,
    required this.serverTimeoutInMilliseconds,
    this.handledHubMethods,
  });

  String baseUrl;

  TransportTypeMessage transportType;

  Map<String?, String?>? headers;

  String? accessToken;

  int handShakeResponseTimeoutInMilliseconds;

  int keepAliveIntervalInMilliseconds;

  int serverTimeoutInMilliseconds;

  List<HandledHubMethodMessage?>? handledHubMethods;

  Object encode() {
    return <Object?>[
      baseUrl,
      transportType.index,
      headers,
      accessToken,
      handShakeResponseTimeoutInMilliseconds,
      keepAliveIntervalInMilliseconds,
      serverTimeoutInMilliseconds,
      handledHubMethods,
    ];
  }

  static CreateHubConnectionManagerMessage decode(Object result) {
    result as List<Object?>;
    return CreateHubConnectionManagerMessage(
      baseUrl: result[0]! as String,
      transportType: TransportTypeMessage.values[result[1]! as int],
      headers: (result[2] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      accessToken: result[3] as String?,
      handShakeResponseTimeoutInMilliseconds: result[4]! as int,
      keepAliveIntervalInMilliseconds: result[5]! as int,
      serverTimeoutInMilliseconds: result[6]! as int,
      handledHubMethods: (result[7] as List<Object?>?)?.cast<HandledHubMethodMessage?>(),
    );
  }
}

class HubConnectionManagerIdMessage {
  HubConnectionManagerIdMessage({
    required this.hubConnectionManagerId,
  });

  int hubConnectionManagerId;

  Object encode() {
    return <Object?>[
      hubConnectionManagerId,
    ];
  }

  static HubConnectionManagerIdMessage decode(Object result) {
    result as List<Object?>;
    return HubConnectionManagerIdMessage(
      hubConnectionManagerId: result[0]! as int,
    );
  }
}

class InvokeHubMethodMessage {
  InvokeHubMethodMessage({
    required this.methodName,
    this.args,
    required this.hubConnectionManagerIdMessage,
  });

  String methodName;

  List<String?>? args;

  HubConnectionManagerIdMessage hubConnectionManagerIdMessage;

  Object encode() {
    return <Object?>[
      methodName,
      args,
      hubConnectionManagerIdMessage.encode(),
    ];
  }

  static InvokeHubMethodMessage decode(Object result) {
    result as List<Object?>;
    return InvokeHubMethodMessage(
      methodName: result[0]! as String,
      args: (result[1] as List<Object?>?)?.cast<String?>(),
      hubConnectionManagerIdMessage: HubConnectionManagerIdMessage.decode(result[2]! as List<Object?>),
    );
  }
}

class OnHubConnectionStateChangedMessage {
  OnHubConnectionStateChangedMessage({
    required this.state,
  });

  HubConnectionStateMessage state;

  Object encode() {
    return <Object?>[
      state.index,
    ];
  }

  static OnHubConnectionStateChangedMessage decode(Object result) {
    result as List<Object?>;
    return OnHubConnectionStateChangedMessage(
      state: HubConnectionStateMessage.values[result[0]! as int],
    );
  }
}

class OnHubConnectionClosedMessage {
  OnHubConnectionClosedMessage({
    required this.exceptionMessage,
  });

  String exceptionMessage;

  Object encode() {
    return <Object?>[
      exceptionMessage,
    ];
  }

  static OnHubConnectionClosedMessage decode(Object result) {
    result as List<Object?>;
    return OnHubConnectionClosedMessage(
      exceptionMessage: result[0]! as String,
    );
  }
}

class OnMessageReceivedMessage {
  OnMessageReceivedMessage({
    required this.methodName,
    this.args,
  });

  String methodName;

  List<String?>? args;

  Object encode() {
    return <Object?>[
      methodName,
      args,
    ];
  }

  static OnMessageReceivedMessage decode(Object result) {
    result as List<Object?>;
    return OnMessageReceivedMessage(
      methodName: result[0]! as String,
      args: (result[1] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class SetBaseUrlMessage {
  SetBaseUrlMessage({
    required this.baseUrl,
    required this.hubConnectionManagerIdMessage,
  });

  String baseUrl;

  HubConnectionManagerIdMessage hubConnectionManagerIdMessage;

  Object encode() {
    return <Object?>[
      baseUrl,
      hubConnectionManagerIdMessage.encode(),
    ];
  }

  static SetBaseUrlMessage decode(Object result) {
    result as List<Object?>;
    return SetBaseUrlMessage(
      baseUrl: result[0]! as String,
      hubConnectionManagerIdMessage: HubConnectionManagerIdMessage.decode(result[1]! as List<Object?>),
    );
  }
}

class _HubConnectionManagerNativeApiCodec extends StandardMessageCodec {
  const _HubConnectionManagerNativeApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CreateHubConnectionManagerMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is HandledHubMethodMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is HubConnectionManagerIdMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is InvokeHubMethodMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is SetBaseUrlMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return CreateHubConnectionManagerMessage.decode(readValue(buffer)!);
      case 129: 
        return HandledHubMethodMessage.decode(readValue(buffer)!);
      case 130: 
        return HubConnectionManagerIdMessage.decode(readValue(buffer)!);
      case 131: 
        return InvokeHubMethodMessage.decode(readValue(buffer)!);
      case 132: 
        return SetBaseUrlMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Used to communicate with hub connections managers on the native side.
class HubConnectionManagerNativeApi {
  /// Constructor for [HubConnectionManagerNativeApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HubConnectionManagerNativeApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _HubConnectionManagerNativeApiCodec();

  final String __pigeon_messageChannelSuffix;

  Future<HubConnectionManagerIdMessage> createHubConnectionManager(CreateHubConnectionManagerMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.fsignalr.HubConnectionManagerNativeApi.createHubConnectionManager$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as HubConnectionManagerIdMessage?)!;
    }
  }

  Future<void> startHubConnection(HubConnectionManagerIdMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.fsignalr.HubConnectionManagerNativeApi.startHubConnection$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopHubConnection(HubConnectionManagerIdMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.fsignalr.HubConnectionManagerNativeApi.stopHubConnection$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> invoke(InvokeHubMethodMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.fsignalr.HubConnectionManagerNativeApi.invoke$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setBaseUrl(SetBaseUrlMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.fsignalr.HubConnectionManagerNativeApi.setBaseUrl$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disposeHubConnectionManager(HubConnectionManagerIdMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.fsignalr.HubConnectionManagerNativeApi.disposeHubConnectionManager$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _HubConnectionManagerFlutterApiCodec extends StandardMessageCodec {
  const _HubConnectionManagerFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is OnHubConnectionClosedMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is OnHubConnectionStateChangedMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is OnMessageReceivedMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return OnHubConnectionClosedMessage.decode(readValue(buffer)!);
      case 129: 
        return OnHubConnectionStateChangedMessage.decode(readValue(buffer)!);
      case 130: 
        return OnMessageReceivedMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class HubConnectionManagerFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _HubConnectionManagerFlutterApiCodec();

  void onHubConnectionStateChanged(OnHubConnectionStateChangedMessage msg);

  void onConnectionClosed(OnHubConnectionClosedMessage msg);

  void onMessageReceived(OnMessageReceivedMessage msg);

  static void setUp(HubConnectionManagerFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.fsignalr.HubConnectionManagerFlutterApi.onHubConnectionStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.fsignalr.HubConnectionManagerFlutterApi.onHubConnectionStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final OnHubConnectionStateChangedMessage? arg_msg = (args[0] as OnHubConnectionStateChangedMessage?);
          assert(arg_msg != null,
              'Argument for dev.flutter.pigeon.fsignalr.HubConnectionManagerFlutterApi.onHubConnectionStateChanged was null, expected non-null OnHubConnectionStateChangedMessage.');
          try {
            api.onHubConnectionStateChanged(arg_msg!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.fsignalr.HubConnectionManagerFlutterApi.onConnectionClosed$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.fsignalr.HubConnectionManagerFlutterApi.onConnectionClosed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final OnHubConnectionClosedMessage? arg_msg = (args[0] as OnHubConnectionClosedMessage?);
          assert(arg_msg != null,
              'Argument for dev.flutter.pigeon.fsignalr.HubConnectionManagerFlutterApi.onConnectionClosed was null, expected non-null OnHubConnectionClosedMessage.');
          try {
            api.onConnectionClosed(arg_msg!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.fsignalr.HubConnectionManagerFlutterApi.onMessageReceived$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.fsignalr.HubConnectionManagerFlutterApi.onMessageReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final OnMessageReceivedMessage? arg_msg = (args[0] as OnMessageReceivedMessage?);
          assert(arg_msg != null,
              'Argument for dev.flutter.pigeon.fsignalr.HubConnectionManagerFlutterApi.onMessageReceived was null, expected non-null OnMessageReceivedMessage.');
          try {
            api.onMessageReceived(arg_msg!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
